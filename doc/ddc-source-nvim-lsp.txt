*ddc-source-nvim-lsp.txt*	nvim-lsp completion for ddc.vim

Authors: Shougo <Shougo.Matsu at gmail.com>
         uga-rosa <uga6603 at gmail.com>
License: MIT license

CONTENTS                                        *ddc-source-nvim-lsp-contents*

Introduction		|ddc-source-nvim-lsp-introduction|
Install			|ddc-source-nvim-lsp-install|
Examples		|ddc-source-nvim-lsp-examples|
Params			|ddc-source-nvim-lsp-params|
FAQ			|ddc-source-nvim-lsp-faq|


==============================================================================
INTRODUCTION                                *ddc-source-nvim-lsp-introduction*

This source collects items from "nvim-lsp".


==============================================================================
INSTALL                                          *ddc-source-nvim-lsp-install*

Please install both "ddc.vim" and "denops.vim".

https://github.com/Shougo/ddc.vim
https://github.com/vim-denops/denops.vim

You must use neovim with "nvim-lsp" configuration.

You also need a snippet plugin if you want to expand snippets in LSP format.
e.g.
https://github.com/hrsh7th/vim-vsnip
https://github.com/SirVer/ultisnips
https://github.com/L3MON4D3/LuaSnip
https://github.com/dcampos/nvim-snippy
If you are using neovim nightly, then |vim.snippet| would be another option.

If you want to read the documentation for items, please use
"denops-popup-preview.vim".

https://github.com/matsui54/denops-popup-preview.vim


==============================================================================
EXAMPLES                                        *ddc-source-nvim-lsp-examples*

To take advantage of all the features, you need to set client_capabilities.

>lua
	local capabilities = require(
	    "ddc_nvim_lsp").make_client_capabilities()
	require("lspconfig").denols.setup({
	  capabilities = capabilities,
	})
<
>vim
	call ddc#custom#patch_global('sources', ['nvim-lsp'])

	call ddc#custom#patch_global('sourceOptions', #{
	      \   nvim-lsp: #{
	      \     mark: 'lsp',
	      \     forceCompletionPattern: '\.\w*|:\w*|->\w*',
	      \     sorters: ['sorter_lsp-kind'],
	      \   },
	      \ })

	" Register snippet engine (vim-vsnip)
	call ddc#custom#patch_global('sourceParams', #{
	      \   nvim-lsp: #{
	      \     snippetEngine: denops#callback#register({
	      \           body -> vsnip#anonymous(body)
	      \     }),
	      \   }
	      \ })
<

==============================================================================
PARAMS                                            *ddc-source-nvim-lsp-params*

                                   *ddc-source-nvim-lsp-param-confirmBehavior*
confirmBehavior		("insert" | "replace")
		- "insert":	Inserts the selected item and moves adjacent
				text to the right.
		- "replace":	Replaces adjacent text with the selected item.

		Default: "insert"

                          *ddc-source-nvim-lsp-param-enableAdditionalTextEdit*
enableAdditionalTextEdit	(boolean)
		Enable supplementary editing apart from the cursor. For
		instance, it allows the auto-import of the
		typescript-language-server, as well as macro-expansion via
		rust-analyzer.
		To use this feature,
		|ddc-source-nvim-lsp-param-enableResolveItem| must be
		|v:true|.

		Default: v:false

                                 *ddc-source-nvim-lsp-param-enableResolveItem*
enableResolveItem	(boolean)
		Enable LSP's "completionItem/resolve" feature.

		Default: v:false

                                         *ddc-source-nvim-lsp-param-lspEngine*
lspEngine		(string)
		The LSP Engine to use.

		- "nvim-lsp":	Use "nvim-lsp" engine.  It is neovim builtin.

		- "vim-lsp":	Use "vim-lsp" engine.
				https://github.com/prabirshrestha/vim-lsp

		- "lspoints":	Use "lspoints" engine.  It use "denops.vim".
				https://github.com/kuuote/lspoints

		Default: "nvim-lsp"

                                     *ddc-source-nvim-lsp-param-snippetEngine*
snippetEngine		(string | function)
		The language server may return snippet as items, so work with
		another plugin to expand it. Register with
		|denops#callback#register()| and specify its id in this param.

		NOTE: If you use |ddc#custom#load_config()|, you can pass
		TypeScript function directly.

		NOTE: If you do not use the snippet plugin, leave the empty
		string. Do not register functions that do nothing.
>vim
		" https://github.com/hrsh7th/vim-vsnip
		denops#callback#register({ body -> vsnip#anonymous(body) })
		" https://github.com/SirVer/ultisnips
		denops#callback#register({ body -> UltiSnips#Anon(body) })
<
>lua
		-- https://github.com/L3MON4D3/LuaSnip
		vim.fn["denops#callback#register"](function(body)
		  require('luasnip').lsp_expand(body)
		end)
		-- https://github.com/dcampos/nvim-snippy
		vim.fn["denops#callback#register"](function(body)
		  require('snippy').expand_snippet(body)
		end)
<
		Default: ""

                                  *ddc-source-nvim-lsp-param-snippetIndicator*
snippetIndicator	(string)
		The indicator string for snippet items added to the end of
		a completion item.

		NOTE: This affects ddc-item-attribute-abbr.

		Default: "~"

==============================================================================
FREQUENTLY ASKED QUESTIONS (FAQ)                     *ddc-source-nvim-lsp-faq*

Q: The snippet is double expanded.

A: Remove "vim-vsnip-integ" and use "ddc-source-vsnip" instead.
Since "vim-vsnip-integ" sets |:autocmd|, please remove it completely from
'runtimepath'.

https://github.com/uga-rosa/ddc-source-vsnip

Q: The items are not displayed.

A: You have enabled LSP snippet by "snippetSupport" in lspconfig.
If you want to complete snippet items, you must configure
|ddc-source-nvim-lsp-param-snippetEngine|. Otherwise, they are filtered.

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
