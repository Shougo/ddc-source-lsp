*ddc-source-lsp.txt*				lsp completion for ddc.vim

Authors: Shougo <Shougo.Matsu at gmail.com>
         uga-rosa <uga6603 at gmail.com>
License: MIT license

CONTENTS                                             *ddc-source-lsp-contents*

Introduction					|ddc-source-lsp-introduction|
Install						|ddc-source-lsp-install|
Examples					|ddc-source-lsp-examples|
Params						|ddc-source-lsp-params|
FAQ						|ddc-source-lsp-faq|


==============================================================================
INTRODUCTION                                     *ddc-source-lsp-introduction*

This source collects items from "nvim-lsp".


==============================================================================
INSTALL                                               *ddc-source-lsp-install*

Please install both "ddc.vim" and "denops.vim".

https://github.com/Shougo/ddc.vim
https://github.com/vim-denops/denops.vim

You must set up "nvim-lsp" (neovim builtin lsp client) or "vim-lsp" or
"lspoints".
https://github.com/prabirshrestha/vim-lsp
https://github.com/kuuote/lspoints

You also need a snippet plugin if you want to expand snippets in LSP format.
e.g.
https://github.com/hrsh7th/vim-vsnip
https://github.com/SirVer/ultisnips
https://github.com/L3MON4D3/LuaSnip
https://github.com/dcampos/nvim-snippy
If you are using neovim nightly, then |vim.snippet| would be another option.

If you want to read the documentation for items, please use
below plugins.

https://github.com/Shougo/pum.vim
https://github.com/matsui54/denops-popup-preview.vim
https://github.com/uga-rosa/ddc-previewer-floating


==============================================================================
EXAMPLES                                             *ddc-source-lsp-examples*

To take advantage of all the features, you need to set client_capabilities.

>lua
	vim.lsp.config('*', {
	  capabilities = require("ddc_source_lsp").make_client_capabilities(),
	})
<
>vim
	call ddc#custom#patch_global('sources', ['lsp'])

	call ddc#custom#patch_global('sourceOptions', #{
	      \   lsp: #{
	      \     isVolatile: v:true,
	      \     mark: 'lsp',
	      \     forceCompletionPattern: '\.\w*|:\w*|->\w*',
	      \   },
	      \ })

	" Register snippet engine (vim-vsnip)
	call ddc#custom#patch_global('sourceParams', #{
	      \   lsp: #{
	      \     snippetEngine: denops#callback#register({
	      \           body -> vsnip#anonymous(body)
	      \     }),
	      \   }
	      \ })
<

==============================================================================
PARAMS                                                 *ddc-source-lsp-params*

                                                  *ddc-source-lsp-param-bufnr*
bufnr			(number | v:null)
		- number:	the number of a buffer
		- v:null:	the current buffer

		Specify the buffer to be used in requests to the language
		server. Needs not be set for normal use. see FAQ
		(|ddc-source-lsp-faq-markdown-codeblocks|).

		Default: v:null

                                        *ddc-source-lsp-param-confirmBehavior*
confirmBehavior		("insert" | "replace")
		- "insert":	Inserts the selected item and moves adjacent
				text to the right.
		- "replace":	Replaces adjacent text with the selected item.

		Default: "insert"

                               *ddc-source-lsp-param-enableAdditionalTextEdit*
enableAdditionalTextEdit	(boolean)
		Enable supplementary editing apart from the cursor. For
		instance, it allows the auto-import of the
		typescript-language-server, as well as macro-expansion via
		rust-analyzer.
		NOTE: To use this feature,
		|ddc-source-lsp-param-enableResolveItem| must be
		|v:true|.

		Default: v:false

                                    *ddc-source-lsp-param-enableDisplayDetail*
enableDisplayDetail		(boolean)
		Set the detailed text in |ddc-item-attribute-menu| if
		possible.
		NOTE: The text depends on LSP server.
		NOTE: The text may be very long.

		Default: v:false

                                       *ddc-source-lsp-param-enableMatchLabel*
enableMatchLabel		(boolean)
		If it is enabled, item's |ddc-item-attribute-word| must be
		matched to LSP "label".
		NOTE: It can remove invalid items from LSP server.

		Default: v:false

                                      *ddc-source-lsp-param-enableResolveItem*
enableResolveItem	(boolean)
		Enable LSP's "completionItem/resolve" feature when the item is
		confirmed.
		NOTE: It must be enabled to enable LSP auto-import feature.

		Default: v:false

                                              *ddc-source-lsp-param-lspEngine*
lspEngine		(string)
		The LSP Engine to use.

		- "nvim-lsp":	Use "nvim-lsp" engine.  It is neovim builtin.

		- "vim-lsp":	Use "vim-lsp" engine.
				https://github.com/prabirshrestha/vim-lsp

		- "lspoints":	Use "lspoints" engine.  It use "denops.vim".
				https://github.com/kuuote/lspoints

		Default: "nvim-lsp"

                                      *ddc-source-lsp-param-manualOnlyServers*
manualOnlyServers		(string[])
		The LSP server names to use manual completion only.
		It is useful if the server is very slow performance.

		Default: []

                                          *ddc-source-lsp-param-snippetEngine*
snippetEngine		(string | function)
		The language server may return snippet as items, so work with
		another plugin to expand it. Register with
		|denops#callback#register()| and specify its id in this param.

		NOTE: If you use |ddc#custom#load_config()|, you can pass
		TypeScript function directly.

		NOTE: If you do not use the snippet plugin, leave the empty
		string. Do not register functions that do nothing.
>vim
		" https://github.com/hrsh7th/vim-vsnip
		denops#callback#register({ body -> vsnip#anonymous(body) })
		" https://github.com/SirVer/ultisnips
		denops#callback#register({ body -> UltiSnips#Anon(body) })
<
>lua
		-- https://github.com/L3MON4D3/LuaSnip
		vim.fn['denops#callback#register'](function(body)
		  require('luasnip').lsp_expand(body)
		end)

		-- https://github.com/dcampos/nvim-snippy
		vim.fn['denops#callback#register'](function(body)
		  require('snippy').expand_snippet(body)
		end)
<
		Default: ""

                                       *ddc-source-lsp-param-snippetIndicator*
snippetIndicator	(string)
		The indicator string for snippet items added to the end of
		a completion item.

		NOTE: This affects ddc-item-attribute-abbr.

		Default: "~"

==============================================================================
FREQUENTLY ASKED QUESTIONS (FAQ)                          *ddc-source-lsp-faq*

                                       *ddc-source-lsp-faq-snippet-is-doubled*
Q: The snippet is double expanded.

A: Remove "vim-vsnip-integ" and use "ddc-source-vsnip" instead.
Since "vim-vsnip-integ" sets |:autocmd|, it conflicts with the source.  Please
remove it completely from 'runtimepath'.

https://github.com/uga-rosa/ddc-source-vsnip

                                      *ddc-source-lsp-faq-items-not-displayed*
Q: The items are not displayed.

A: You have enabled LSP snippet by "snippetSupport" in lspconfig.
If you want to complete snippet items, you must configure
|ddc-source-lsp-param-snippetEngine|. Otherwise, they are filtered.

                                      *ddc-source-lsp-faq-markdown-codeblocks*
Q: How to enable completions in markdown codeblocks?

A: Use |ddc#custom#set_context_filetype()| and conditionally set the number of
a virtual buffer to |ddc-source-lsp-param-bufnr|. The virtual buffer should
synchronize its content with the codeblock and should have an attached
language server. In Neovim, otter.nvim (https://github.com/jmbuhr/otter.nvim)
is the plugin to manage such buffers. Following is an example setup:

>lua
	-- Activate otter on markdown
	vim.api.nvim_create_autocmd('Filetype', {
	  pattern = 'lua',
	  callback = function()
	    require('otter').activate(
	      {'lua'}, -- languages to enable completions
	      false -- disable completion with cmp
	    )
	  end
	})

	vim.fn['ddc#custom#set_context_filetype']('markdown', function()
	  local otter_keeper = require('otter.keeper')

	  -- sync quarto buffer with otter buffers
	  otter_keeper.sync_raft(ctx.buf)

	  -- sourceParams based on the cursor positions
	  local cursor = vim.api.nvim_win_get_cursor(0)
	  local otter_attached = otter_keeper._otters_attached[ctx.buf]
	  for _, chunks in pairs(otter_attached.code_chunks) do
	    for _, chunk in pairs(chunks) do
	      local srow, scol = chunk.range.from[1] + 1, chunk.range.from[2]
	      local erow, ecol = chunk.range.to[1] + 1, chunk.range.to[2]
	      if ((cursor[1] == srow and cursor[2] >= scol)
	          or (cursor[1] > srow))
	        and ((cursor[1] == erow and cursor[2] <= ecol)
	             or cursor[1] < erow)
	      then
	        return {
	          sourceParams = {
	            lsp = { bufnr = otter_attached.buffers[chunk.lang] },
	          },
	        }
	      end
	    end
	  end

	  -- if current cursor is not inside a codeblock, do nothing
	  return {}
	end)
<

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
